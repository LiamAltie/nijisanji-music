name: Deploy Sanity Studio on Change

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "sanity/**"
      - ".github/slack/**"

jobs:
  deploy-sanity:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare Slack Notification Vars
        id: prep_vars
        run: |
          echo "WORKFLOW_NAME=${{ github.workflow }}" >> $GITHUB_ENV
          echo "REPOSITORY=${{ github.repository }}" >> $GITHUB_ENV
          echo "REF_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "ACTOR=${{ github.actor }}" >> $GITHUB_ENV
          echo "EVENT_NAME=${{ github.event_name }}" >> $GITHUB_ENV
          echo "RUN_URL=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV

      - name: Generate Slack Start Payload
        id: slack_payload_start
        run: |
          JSON_PAYLOAD=$(envsubst < '.github/slack/start-payload.template.json' | jq -c .)
          if [ -z "$JSON_PAYLOAD" ]; then echo "Error: Generated JSON payload is empty."; exit 1; fi
          echo "payload=$JSON_PAYLOAD" >> $GITHUB_OUTPUT

      - name: Notify Slack - Workflow Started
        if: always()
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: ${{ steps.slack_payload_start.outputs.payload }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install Sanity CLI and dependencies
        run: npm install

      - name: Deploy Sanity Studio
        run: npx sanity deploy --non-interactive
        env:
          SANITY_AUTH_TOKEN: ${{ secrets.SANITY_AUTH_TOKEN }}
          SANITY_STUDIO_PROJECT_ID: ${{ secrets.SANITY_STUDIO_PROJECT_ID }}
          SANITY_STUDIO_DATASET: ${{ secrets.SANITY_STUDIO_DATASET }}

      - name: Generate Slack Success Payload
        id: slack_payload_success
        if: success()
        run: |
          JSON_PAYLOAD=$(envsubst < '.github/slack/success-payload.template.json' | jq -c .)
          if [ -z "$JSON_PAYLOAD" ]; then echo "Error: Generated JSON payload is empty."; exit 1; fi
          echo "payload=$JSON_PAYLOAD" >> $GITHUB_OUTPUT

      - name: Notify Slack - Success
        if: success()
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: ${{ steps.slack_payload_success.outputs.payload }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Generate Slack Failure Payload
        id: slack_payload_failure
        if: failure()
        run: |
          JSON_PAYLOAD=$(envsubst < '.github/slack/failure-payload.template.json' | jq -c .)
          if [ -z "$JSON_PAYLOAD" ]; then echo "Error: Generated JSON payload is empty."; exit 1; fi
          echo "payload=$JSON_PAYLOAD" >> $GITHUB_OUTPUT

      - name: Notify Slack - Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: ${{ steps.slack_payload_failure.outputs.payload }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
